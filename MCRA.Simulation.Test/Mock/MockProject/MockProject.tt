<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".Generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    // Start of template code
    var projectSourceFile = Host.ResolvePath(@$"..\..\..\MCRA.General\Action\Settings\ProjectDto.cs");
    var projectGeneratedFile = Host.ResolvePath(@$"..\..\..\MCRA.General\Action\Settings\ProjectDto.Generated.cs");
#>
using MCRA.General.Action.Settings;
using Moq;

namespace MCRA.Simulation.Test.Mock.MockProject {
    public partial class MockProject {
        private void initializeSubSettingsMocks() {
            //setup all subsettings moqs
            //source: <#=projectSourceFile#>
<#
    var settingNames = new List<string>();
    var settingsProperties = new List<string>();
    var propNames = new List<string>();
    //all other properties except from skip list
    var propNamesSkip = new HashSet<string> {
        "Id", "McraVersion", "Name", "Description",
        "DateCreated", "DateModified"
    };

    var lines = File.ReadAllLines(projectSourceFile).ToList();
    lines.AddRange(File.ReadAllLines(projectGeneratedFile));
    var process = false;
    foreach(var line in lines.Select(l => l.Trim())) {
      if(!process) {
        process = line.StartsWith("public partial class ProjectDto");
      } else {
        if(line.StartsWith("public virtual")) {
          var parts = line.Split(' ');
          var name = parts[3];
          if(!parts[2].EndsWith("Dto"))
            settingsProperties.Add(name);
        }
      }
    }

    foreach(var p in settingsProperties) {
        if(p.EndsWith("Settings")) {
            settingNames.Add(p.Substring(0, p.Length - 8));
        } else if(!propNamesSkip.Contains(p)) {
            propNames.Add(p);
        }
    }

    //create a new file for each view model name
    foreach(var item in settingNames) {
        #>
            var <#=item#>Mock = new Mock<<#=item#>Settings>().SetupAllProperties();
            setSettings(<#=item#>Mock, Project.<#=item#>Settings);
            _settingsMoq.Setup(m => m.<#=item#>Settings).Returns(<#=item#>Mock.Object);
            _moqsDict.Add(typeof(<#=item#>Settings), <#=item#>Mock);

<#
    }
    //create a new file for each view model name
    foreach(var item in propNames) {
        #>
            _settingsMoq.Setup(m => m.<#=item#>).Returns(Project.<#=item#>);

<#
    }
#>
        }
    }
}
