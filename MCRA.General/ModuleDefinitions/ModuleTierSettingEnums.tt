<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".Generated.cs" encoding="utf-8" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace MCRA.General {

<#
	var xmlFilesFolder = Host.ResolvePath("Modules");
	var xmlFiles = Directory.GetFiles(xmlFilesFolder, "*.xml");
	foreach(var xmlFile in xmlFiles) {
		var xmlDoc = new XmlDocument();
		xmlDoc.Load(xmlFile);
        var tierNode = xmlDoc.SelectSingleNode("//Module/TierSelectionSetting");
        if (tierNode != null) {
#>
    public enum <#=xmlDoc.SelectSingleNode("//Module/TierSelectionSetting").InnerText.Trim()#> {
        [Display(Name = "Custom", ShortName = "Custom", Order = 100)]
        [Description("By setting this tier to custom, the settings can be configured in any way desirable (without tier specific presets).")]
        Custom = 0,
<#
            foreach(XmlNode unit in xmlDoc.SelectNodes("//Module/Tiers/Tier")) {
                var hasOrder = int.TryParse(unit.SelectSingleNode("Order")?.InnerText, out var xOrder);
                var hasValue = int.TryParse(unit.SelectSingleNode("EnumValue")?.InnerText, out var xValue);
                var nameText = unit.SelectSingleNode("Name").InnerText;
                var shortNameText = unit.SelectSingleNode("ShortName")?.InnerText ?? nameText;
                var description = unit.SelectSingleNode("Description")?.InnerText ?? nameText;
                description = Regex.Replace(description, @"\s+", " ").Trim();
#>
        [Display(Name = "<#=nameText#>", ShortName = "<#=shortNameText#>"<#=(hasOrder ? $", Order = {xOrder}" : "")#>)]
        [Description("<#=description#>")]
        <#=unit.SelectSingleNode("Id").InnerText#><#=(hasValue ? $" = {xValue}" : "")#>,
<#
            }
#>
    }

<#
        }
	}
#><#
#>
}
