using MCRA.Data.Compiled.Objects;
using MCRA.Data.Management.RawDataObjectConverters;
using MCRA.Data.Management.RawDataWriters;
using MCRA.Data.Raw.Objects.Risks;
using MCRA.General;
using MCRA.General.Action.Settings.Dto;

namespace MCRA.Simulation.Actions.Risks {

    public sealed class RisksOutputWriter {

        /// <summary>
        /// Writes the output data generated by a dietary exposures action to the provided raw data writer.
        /// </summary>
        /// <param name="project"></param>
        /// <param name="data"></param>
        /// <param name="result"></param>
        /// <param name="rawDataWriter"></param>
        public void WriteOutputData(ProjectDto project, ActionData data, RisksActionResult result, IRawDataWriter rawDataWriter) {
            var rawDataConverter = new RawRisksDataConverter();
            if (data.ActiveSubstances.Count == 1 || data.CorrectedRelativePotencyFactors != null) {
                var riskModel = createRiskModel(project, data, result);
                var rawData = rawDataConverter.ToRaw(new List<RiskModel>() { riskModel });
                rawDataWriter.Set(rawData);
            }
        }

        /// <summary>
        /// Updates the dietary exposures data of the raw data writer. Appends
        /// another bootstrap record / uncertainty set.
        /// </summary>
        /// <param name="project"></param>
        /// <param name="rawDataWriter"></param>
        /// <param name="data"></param>
        /// <param name="result"></param>
        /// <param name="idBootstrap"></param>
        public void UpdateOutputData(
            ProjectDto project,
            IRawDataWriter rawDataWriter,
            ActionData data,
            RisksActionResult result,
            int idBootstrap
        ) {
            var rawData = rawDataWriter.Get(SourceTableGroup.Risks) as RawRisksData;
            var rawDataConverter = new RawRisksDataConverter();
            if (data.ActiveSubstances.Count == 1 || data.CorrectedRelativePotencyFactors != null) {
                var riskModel = createRiskModel(project, data, result);
                rawDataConverter.AppendUncertaintyRunValues(
                    rawData,
                    idBootstrap,
                    new List<RiskModel>() { riskModel }
                );
            }
        }

        private static RiskModel createRiskModel(ProjectDto project, ActionData data, RisksActionResult result) {
            return new RiskModel() {
                Code = $"{project.Id}",
                Name = $"{project.Name}-{project.EffectModelSettings.RiskMetricType}",
                Description = project.Description,
                Compound = data.ReferenceCompound,
                RiskPercentiles = result.RiskPercentiles
                    .Select(r => new RiskPercentile() {
                        Percentage = r.Percentage,
                        Risk = project.EffectModelSettings.RiskMetricType == RiskMetricType.MarginOfExposure
                            ? r.MarginOfExposure : r.HazardQuotient
                    })
                    .ToDictionary(r => r.Percentage),
                RiskMetric = project.EffectModelSettings.RiskMetricType
            };
        }
    }
}
