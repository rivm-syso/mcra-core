using MCRA.Data.Compiled.Wrappers.Exposure;
using MCRA.Data.Management.RawDataObjectConverters;
using MCRA.Data.Management.RawDataWriters;
using MCRA.Data.Raw.Objects.TargetExposures;
using MCRA.General;
using MCRA.General.Action.Settings.Dto;

namespace MCRA.Simulation.Actions.TargetExposures {

    public sealed class TargetExposuresOutputWriter {

        /// <summary>
        /// Writes the output data generated by a target exposures action to the provided raw data writer.
        /// </summary>
        /// <param name="project"></param>
        /// <param name="data"></param>
        /// <param name="result"></param>
        /// <param name="rawDataWriter"></param>
        public void WriteOutputData(ProjectDto project, ActionData data, TargetExposuresActionResult result, IRawDataWriter rawDataWriter) {
            var rawDataConverter = new RawTargetExposuresDataConverter();
            var exposureStatistics = getExposureStatistics(project, data, result);
            if (exposureStatistics != null) {
                var rawData = rawDataConverter.ToRaw(exposureStatistics, project.OutputDetailSettings.SelectedPercentiles);
                rawDataWriter.Set(rawData);
            }
        }

        /// <summary>
        /// Updates the target exposures data of the raw data writer. Appends
        /// another bootstrap record / uncertainty set.
        /// </summary>
        /// <param name="project"></param>
        /// <param name="rawDataWriter"></param>
        /// <param name="data"></param>
        /// <param name="result"></param>
        /// <param name="idBootstrap"></param>
        public void UpdateOutputData(
            ProjectDto project,
            IRawDataWriter rawDataWriter,
            ActionData data,
            TargetExposuresActionResult result,
            int idBootstrap
        ) {
            var rawData = rawDataWriter.Get(SourceTableGroup.TargetExposures) as RawTargetExposuresData;
            var rawDataConverter = new RawTargetExposuresDataConverter();
            if (data.ActiveSubstances.Count == 1 || data.CorrectedRelativePotencyFactors != null) {
                var exposureStatistics = getExposureStatistics(project, data, result);
                if (exposureStatistics != null) {
                    rawDataConverter.AppendUncertaintyRunValues(
                        rawData,
                        idBootstrap,
                        exposureStatistics,
                        project.OutputDetailSettings.SelectedPercentiles
                    );
                }
            }
        }

        private ICollection<SimpleExposureStatistics> getExposureStatistics(
            ProjectDto project,
            ActionData data,
            TargetExposuresActionResult result
        ) {
            var exposureStatistics = new List<SimpleExposureStatistics>();
            if (project.AssessmentSettings.ExposureType == ExposureType.Acute) {
                if (data.CorrectedRelativePotencyFactors != null || data.ActiveSubstances.Count == 1) {
                    var statistics = new SimpleExposureStatistics() {
                        Code = $"{project.Id}",
                        Name = project.Name,
                        Description = project.Description,
                        TargetUnit = data.TargetExposureUnit,
                        Substance = data.ReferenceCompound,
                        SamplingWeights = result.AggregateIndividualDayExposures.Select(c => c.IndividualSamplingWeight).ToList()
                    };
                    if (data.ActiveSubstances.Count > 1) {
                        statistics.Intakes = result.AggregateIndividualDayExposures
                            .Select(c => c.TotalConcentrationAtTarget(data.CorrectedRelativePotencyFactors, data.MembershipProbabilities, project.SubsetSettings.IsPerPerson))
                            .ToList();
                    } else {
                        statistics.Intakes = result.AggregateIndividualDayExposures
                            .Select(c => c.GetSubstanceTotalExposurePerMassUnit(data.ActiveSubstances.First(), project.SubsetSettings.IsPerPerson))
                            .ToList();
                    }
                    exposureStatistics.Add(statistics);
                }
            } else {
                if (data.CorrectedRelativePotencyFactors != null || data.ActiveSubstances.Count == 1) {

                    //Summarize internal, OIM
                    if (project.EffectSettings.TargetDoseLevelType == TargetLevelType.Internal ||
                        project.IntakeModelSettings.IntakeModelType == IntakeModelType.OIM) {
                        var intakes = (data.ActiveSubstances.Count > 1)
                            ? result.AggregateIndividualExposures
                                .Select(c => c.TotalConcentrationAtTarget(data.CorrectedRelativePotencyFactors, data.MembershipProbabilities, project.SubsetSettings.IsPerPerson))
                                .ToList()
                            : result.AggregateIndividualExposures
                                .Select(c => c.GetSubstanceTotalExposurePerMassUnit(data.ActiveSubstances.First(), project.SubsetSettings.IsPerPerson))
                                .ToList();
                        var weights = result.AggregateIndividualExposures.Select(c => c.IndividualSamplingWeight).ToList();
                        var statistics = new SimpleExposureStatistics() {
                            Code = $"{project.Id}-OIM",
                            Name = $"{project.Name} (OIM)",
                            Description = project.Description,
                            TargetUnit = data.TargetExposureUnit,
                            Substance = data.ReferenceCompound,
                            Intakes = intakes,
                            SamplingWeights = weights
                        };
                        exposureStatistics.Add(statistics);
                    }

                    //Summarize LNN, external 
                    if (project.EffectSettings.TargetDoseLevelType == TargetLevelType.External &&
                        project.IntakeModelSettings.IntakeModelType == IntakeModelType.LNN && !project.IntakeModelSettings.FirstModelThenAdd
                    ) {
                        var intakes = data.DietaryModelBasedIntakeResults.SelectMany(c => c.ModelBasedIntakes).ToList();
                        List<double> weights = null;
                        var statistics = new SimpleExposureStatistics() {
                            Code = $"{project.Id}-Model-LNN",
                            Name = $"{project.Name} (Model LNN)",
                            Description = project.Description,
                            TargetUnit = data.TargetExposureUnit,
                            Substance = data.ReferenceCompound,
                            Intakes = intakes,
                            SamplingWeights = weights
                        };
                        exposureStatistics.Add(statistics);
                    }
                }
            }
            return exposureStatistics;
        }
    }
}
